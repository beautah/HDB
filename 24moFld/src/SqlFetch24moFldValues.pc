/*****************************************************************************
* DESCRIPTION
*    Retrieves values from database for 24 month flood control 
*
* ASSUMPTIONS
*    Site_datatype_ids are hard-coded (see #defines in lc_apps.h).
*    Model_run_id is input by user
*
* INPUT
*    Month for which data is to be retrieved is passed in.
*
* OUTPUT
*    Pointer to struct is passed in.
*    Sets values in struct to those retrieved from db.
*    Note that in some cases accum values are passed in from the calling
*      routine, and this function adds to the values. If data is not available
*      for any single day in the month, the accum value is set 
*      to NO_V
int Create24moFldReport (FILE * fp1,
			 char * DateString,
		ALUE_AVAILBLE.
*
* RETURN STATUS
*    OK - retrieval performed w/o database errors.
*    ERROR - database errors.
*
* COMMENTS
*
* AUTHOR - EDITORS
* Yue Wu   Apr 1997
* Darren Silver June 1997
* Oracle Verion:
* Julien Chastang August 1998
*****************************************************************************/

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#include <lc_apps.h>
#include "utils.h"
#include "dbutils.h"
#include "defines.h"
#include "typedefs.h"
#include "SqlFetch24moFldValues.h"

EXEC SQL INCLUDE sqlca; /*This includes the SQL Communications Area*/

double my_min(double num1, double num2)
{
  if (num1 < num2) return (num1);
  return (num2);
}

#define FUNC_NAME "SqlValidModelRunId"
int SqlValidModelRunId(int model_run)
{
    EXEC SQL BEGIN DECLARE SECTION;
      int result;
      ID  modelid;
    EXEC SQL END DECLARE SECTION;

	   EXEC SQL AT :current_dbsite SELECT model_id INTO :modelid FROM ref_model_run WHERE model_run_id = :model_run; 

    if ((result = SqlErrorHandler (FUNC_NAME, TRUE, "Problem selecting value from ref_model_run.\n")) != OK)
     {
        return(ERROR);
     }

    /*
     * check that the model_run_id is related to a 24 month study 
     * model run. The model_run_id for the 24 month study is 2
     */
    if (modelid != 2)
      { 
	printf("\tModel_run_id  %d  is not a 24 month study run!\n",
	       model_run);
	return(ERROR);
      }
    return (OK);
  }

#define FUNC_NAME "SqlFetchDateByModelRunId"
int SqlFetchDateByModelRunId(int model_run, int * mon, int * yr)
{

  EXEC SQL BEGIN DECLARE SECTION;
  int result;
  char date[30];
  EXEC SQL END DECLARE SECTION;
  
  EXEC SQL AT :current_dbsite SELECT to_char(run_date, 'dd-mon-yyyy hh24:mi:ss') INTO :date FROM ref_model_run WHERE model_run_id = :model_run;
 
  if ((result = SqlErrorHandler (FUNC_NAME, TRUE, "Problem selecting value from ref_model_run.\n")) != OK)
    {
            return(ERROR);
    }

  if((result = SqlExtractDatePart(date, MONTH, mon)) != OK)
    {
      PrintError("Error in Extracting the Date\n");
    }
  
  *mon = *mon - 1;
  
  if((result = SqlExtractDatePart(date, YEAR, yr)) != OK)
    {
      PrintError("Error in Extracting the Date\n");
    } 
  
  return(OK);
}

#define FUNC_NAME "SqlFetchSingleValues"
int SqlFetchSingleValue_new(int mri, int sdi, char *date, 
			    char typeofdata, double *value) 
{ 
  EXEC SQL BEGIN DECLARE SECTION;
  int result;
  double return_val;
  EXEC SQL END DECLARE SECTION;
   
  switch (typeofdata)
    {
    case 'r':
	      EXEC SQL AT :current_dbsite SELECT value INTO :return_val FROM r_month WHERE site_datatype_id = :sdi AND start_date_time = to_date(:date,'dd-mon-yyyy hh24:mi:ss');
      break;
    case 'm':
	      EXEC SQL AT :current_dbsite SELECT value INTO :return_val FROM m_month WHERE model_run_id = :mri AND site_datatype_id = :sdi AND start_date_time = to_date(:date,'dd-mon-yyyy hh24:mi:ss');
      break;
    case 'c':
	      EXEC SQL AT :current_dbsite SELECT capliv INTO :return_val FROM ref_res WHERE site_id = :sdi;
      break; 
    default:
      return (ERROR);
    }
  
  if ((result = SqlErrorHandler (FUNC_NAME, TRUE, "Problem selecting value from m_month, r_month, ref_res.\n")) != OK)
    {
      return(ERROR);
    }
  *value = return_val;
  return (OK);
}

int GetUsableSpace(int mri, int inflow_sdi, int rel_sdi, int month, int year, double * val)
{
  int result;
  int success;
  double temp1 = 0.0;
  double temp2 = 0.0;
  double ret_val;
  double ret_val_converted;
  char date[30];
  char dt = 'm'; /* data to calculate the usable is always from m_month */
  
  /* usable space = sum(remaining months thru July inflow) 
     - sum(remaining months thru July release) */
  while (month < 7)
    {
      sprintf(date, "1-%d-%d", month+1, year);

      success = SqlFormatDate(date,date);

       if (success != OK)
       {
           PrintError("Failed to format date correctly... exiting\n");
           exit (ERROR);
       }

      if ((result = SqlFetchSingleValue_new(mri,
					    inflow_sdi,
					    date,
					    dt, &ret_val)) != OK)
	{
	  PrintError("Could not retrieve unregular inflow\n");
	  return (ERROR);
	}
      /*
       * Convert the month inflow into KAF from cfs for each month.
       * and add it to the cummulative KAF value
       */
      ConvertValue (ret_val, 1, 2, date, &ret_val_converted, 1000, 1, 
		    BY_MONTH, NA);
      temp1 += ret_val_converted;

      
      if ((result = SqlFetchSingleValue_new(mri,
					    rel_sdi,
					    date,
					    dt, &ret_val)) != OK)
	{
	  PrintError("Could not retrieve total release\n");
	  return (ERROR);
	}
      /*
       * Convert the release for each month into KAF from cfs
       * and add it to the cummulative KAF value 
       */
      ConvertValue (ret_val, 1, 2, date, &ret_val_converted, 1000, 
		    1, BY_MONTH, NA);
      temp2 += ret_val_converted;

      month ++;
    }
  
   *val = (temp1 - temp2);
  
   return (OK);
}

int GetPredictSpace(int si, int mri, int sdi, char * date, char dt, double * val)
{
  double ret_val;
  double temp_cap;
  double temp_con;
  int result;
  
  /* predicted space = capacity - content */
  
  /*Fetch the total Capacity for si */
  if ((result = SqlFetchSingleValue_new(mri,
					si,
					date,
					'c', &ret_val)) != OK)
    {
      PrintError("Could not retrieve capacity of %d\n", si);
      return (ERROR);
    }
  temp_cap = ret_val;
  
  
  /*Fetch the Content for si in a certain month */
  if ((result = SqlFetchSingleValue_new(mri,
					sdi,
					date,
					dt, &ret_val)) != OK)
    {
      PrintError("Could not retrieve content of %d for %s\n", si, date);
      return (ERROR);
    }
  temp_con = ret_val;
  
  /*
   *
   If the sdi = 1718 (contents value for Flaming Gorge), get the contents and 
   capacity of Fantenelle and Flaming Gorge, and use those numbers to compute
   the predicted space for Flaming Gorge. 
   if sdi = 1718, predicted space =
   capacity(Flaming gorge + Fantenelle) - contents(Flaming Gorge + Fantenelle)
   *
   */
  
  if(sdi == FLGOR_CONT_AF_SDI)
    {
      if ((result = SqlFetchSingleValue_new(mri,
					    FONT_SITE_ID,
					    date,
					    'c', &ret_val)) != OK)
	{
	  PrintError("Could not retrieve capacity of %d\n", si);
	  return (ERROR);
	}
      temp_cap += ret_val;
      
      if ((result = SqlFetchSingleValue_new(mri,
					    FONT_CONT_AF_SDI,
					    date,
					    dt, &ret_val)) != OK)
	{
	  PrintError("Could not retrieve content of %d for %s\n", si, date);
	  return (ERROR);
	}
      temp_con += ret_val;
    }
  
  *val = temp_cap - temp_con;
  return (OK);
} 

#define FUNC_NAME "SqlFetch24monFldValues"
int SqlFetch24monFldValues(Fld24mon * values, int mon, int yr, int mon_count, int modelrun_id)
{

  int result;
  int success;
  double return_val;
  static flag;
  char date[30];
  char date_1[30];
  char datatype;
  

  SwitchSession("UC");
  if ((result = SqlErrorHandler (FUNC_NAME, TRUE, "Problem setting session to uchdb.\n")) != OK)
    {
      PrintError("ERROR occurred in switching session to UC\n");
      return(ERROR);
    }

  
  /* The data in first row of the report is always the real data */
  if (mon_count == 0)
      datatype = 'r';
  
  else
      datatype = 'm';
  
  if(mon == 0)
     sprintf(date, "1-%d-%d", 12, yr - 1);
  else
    sprintf(date, "1-%d-%d", mon, yr);

  success = SqlFormatDate(date,date);

  if (success != OK)
  {
     PrintError("Failed to format date correctly... exiting\n");
     exit (ERROR);
  }

  
  values->bom_space = bom_space_reqd[mon];
  
  /*Fetch the predicted space of Flaming Gorge for a certain month */	
  if ((result = GetPredictSpace(FLGOR_SITE_ID, 
				modelrun_id,
				FLGOR_CONT_AF_SDI, 
				date, 
				datatype, &return_val)) != OK)
    {
      PrintError("Error in Flaming Gorge's predicted space for %s\n", date);
      return (ERROR);
    }
  values->flgorg_pred_space = return_val / 1000.0;
  
  /*Fetch the predicted space of Fontnelle for a certain month */
  if ((result = GetPredictSpace(FONT_SITE_ID,
				modelrun_id,
				FONT_CONT_AF_SDI,
				date,
				datatype, &return_val)) != OK)
    {
      PrintError("Error in Fontnelle's predicted space for %s\n", date);
      return (ERROR);
    }
  values->font_pred_space = return_val / 1000.0;
  
  /* values->flgorg_pred_space += values->font_pred_space; */
  
  /*Fetch the predicted space of Blue Mesa for a certain month */
  if ((result = GetPredictSpace(BLUEMESA_SITE_ID,
				modelrun_id,
				BLUEMESA_CONT_AF_SDI,
				date,
				datatype, &return_val)) != OK)
    {
      PrintError("Error in Blue Mesa's predicted space for %s\n", date);
      return (ERROR);
    }
  values->bluemesa_pred_space = return_val / 1000.0;
  
  /*Fetch the predicted space of Navajo for a certain month */
  if ((result = GetPredictSpace(NAVAJO_SITE_ID,
				modelrun_id,
				NAVAJO_CONT_AF_SDI,
				date,
				datatype, &return_val)) != OK)
    {
      PrintError("Error in Navajo's predicted space for %s\n", date);
      return (ERROR);
    }
  values->navajo_pred_space = return_val / 1000.0;
  
  /*Fetch the predicted space of Lake Powell for a certain month */
  if ((result = GetPredictSpace(POWELL_SITE_ID,
				modelrun_id,
				POWELL_CONT_AF_SDI,
				date,
				datatype, &return_val)) != OK)
    {
      PrintError("Error in Lake Powell's predicted space for %s\n", date);
      return (ERROR);
    }
  values->powell_pred_space = return_val / 1000.0;
  
  values->upbasin_total = values->flgorg_pred_space + values->bluemesa_pred_space + values->powell_pred_space + values->navajo_pred_space; 
  
  /* Effective space is computed for Jan, Feb, Mar, Apr, May, Jun, Jul respectively*/
  
  if (((mon == 0) && (flag == 1)) || ((mon >= 1) && (mon <= 6)))
    {
      if (mon == 0)
	{
	  flag = 0;
	}
      /* effective space = min(predicted space, usable space)*/
      
      /* get usable space of Flaming Gorge */
      if ((result = GetUsableSpace(modelrun_id,
				   FLGOR_UNRINFLOW_CFS_SDI,
				   FLGOR_RELTOT_CFS_SDI,
				   mon,
				   yr, 
				   &return_val)) != OK)
	{
	  PrintError("Error in Flaming Gorge's usable space for %s\n", date);
	  return (ERROR);
	}
      values->flgorg_ce_space = my_min(values->flgorg_pred_space, return_val);
      
      
      /* get usable space of Blue Mesa */
      if ((result = GetUsableSpace(modelrun_id,
				   BLUEMESA_UNRINFLOW_CFS_SDI,
				   BLUEMESA_RELTOT_CFS_SDI,
				   mon,
				   yr,
				   &return_val)) != OK)
	{
	  PrintError("Error in Blue Mesa's usable space for %s\n", date);
	  return (ERROR);
	}
      values->bluemesa_ce_space=my_min(values->bluemesa_pred_space, return_val);
      
      /* get usable space of Navajo */
      if ((result = GetUsableSpace(modelrun_id,
				   NAVAJO_UNRINFLOW_CFS_SDI,
				   NAVAJO_RELTOT_CFS_SDI,
				   mon,
				   yr,
				   &return_val)) != OK)
	{
	  PrintError("Error in NAVAJO's usable space for %s\n", date);
	  return (ERROR);
	}
      values->navajo_ce_space = my_min(values->navajo_pred_space, return_val);
    }
  
  /* Creditable space is computed for Aug, Sep, Oct, Nov, Dec, Jan respectively */
  else
    {
      if (((mon == 0) && (flag == 0)) || (mon >= 7))
	{
	  if (mon == 0)
	    {
	      flag = 1;
	    }
	  
	  /* creditable space = predicted space*/
	  values->flgorg_ce_space = values->flgorg_pred_space;
	  values->bluemesa_ce_space = values->bluemesa_pred_space;
	  values->navajo_ce_space = values->navajo_pred_space;
	}
    }
  values->powell_ce_space = values->powell_pred_space;
  
  values->tot_allow = values->flgorg_ce_space + values->bluemesa_ce_space + values->navajo_ce_space;
  
  sprintf(date_1, "1-%d-%d", mon+1, yr);

  success = SqlFormatDate(date_1,date_1);

  if (success != OK)
  {
      PrintError("Failed to format date correctly... exiting\n");
      exit (ERROR);
  }

  
  /* Sum the sys cont for Upper basin */
  /* fetch content of Taylor */
  if ((result = SqlFetchSingleValue_new(modelrun_id,
					TAYLOR_CONT_AF_SDI,
					date_1,
					'm', &return_val)) != OK)
    {
      PrintError("Could not retrieve content\n");
      return (ERROR);
    }
  values->sys_cont = (return_val/1000.0);
  
  /* fetch content of Blue Mesa */
  if ((result = SqlFetchSingleValue_new(modelrun_id,
					BLUEMESA_CONT_AF_SDI,
					date_1,
					'm', &return_val)) != OK)
    {
      PrintError("Could not retrieve content\n");
      return (ERROR);
    }
  values->sys_cont += (return_val/1000.0);
  
  /* fetch content of Morrow Point*/
  if ((result = SqlFetchSingleValue_new(modelrun_id,
					MORROW_CONT_AF_SDI,
					date_1,
					'm', &return_val)) != OK)
    {
      PrintError("Could not retrieve content\n");
      return (ERROR);
    }
  values->sys_cont += (return_val/1000.0);
  
  /* fetch content of Crystal*/
  if ((result = SqlFetchSingleValue_new(modelrun_id,
					CRYST_CONT_AF_SDI,
					date_1,
					'm', &return_val)) != OK)
    {
      PrintError("Could not retrieve content\n");
      return (ERROR);
    }
  values->sys_cont += (return_val/1000.0);
  
  /* fetch content of Fontenelle*/
  if ((result = SqlFetchSingleValue_new(modelrun_id,
					FONT_CONT_AF_SDI,
					date_1,
					'm', &return_val)) != OK)
    {
      PrintError("Could not retrieve content\n");
      return (ERROR);
    }
  values->sys_cont += (return_val/1000.0);
  
  /* fetch content of Flaming Gorge*/
  if ((result = SqlFetchSingleValue_new(modelrun_id,
					FLGOR_CONT_AF_SDI,
					date_1,
					'm', &return_val)) != OK)
    {
      PrintError("Could not retrieve content\n");
      return (ERROR);
    }
  values->sys_cont += (return_val/1000.0);
  
  /* fetch content of Navajo*/
  if ((result = SqlFetchSingleValue_new(modelrun_id,
					NAVAJO_CONT_AF_SDI,
					date_1,
					'm', &return_val)) != OK)
    {
      PrintError("Could not retrieve content\n");
      return (ERROR);
    }
  values->sys_cont += (return_val/1000.0);
  
  /* fetch content of Lake Powell*/
  if ((result = SqlFetchSingleValue_new(modelrun_id,
					POWELL_CONT_AF_SDI,
					date_1,
					'm', &return_val)) != OK)
    {
      PrintError("Could not retrieve content\n");
      return (ERROR);
    }
  values->sys_cont += (return_val/1000.0);
 

  SwitchSession("LC");
  if ((result = SqlErrorHandler (FUNC_NAME, TRUE, "Problem setting session to lchdb.\n")) != OK)
    {
      PrintError("ERROR occurred in switching session to LC\n");
      return(ERROR);;
    }

 
  /*Fetch the predicted space of Lake Mead for a certain month */
  if ((result = GetPredictSpace(MEAD_SITE_ID,
				modelrun_id,
				MEAD_CONT_AF_SDI,
				date,
				datatype, &return_val)) != OK)
    {
      PrintError("Error in Lake Mead's predicted space for %s\n", date);
      return (ERROR);
    }
  values->mead_pred_space = values->mead_ce_space = return_val / 1000.0;
  
  values->pred_total = values->mead_pred_space + values->upbasin_total;
  
  values->total = values->tot_allow + values->powell_ce_space + values->mead_ce_space;
  
  /* fetch content of Lake Mead*/
  if ((result = SqlFetchSingleValue_new(modelrun_id,
					MEAD_CONT_AF_SDI,
					date_1,
					'm', &return_val)) != OK)
    {
      PrintError("Could not retrieve content\n");
      return (ERROR);
    }
  values->sys_cont += (return_val/1000.0);
  
  /* fetch content of Mohave*/
  if ((result = SqlFetchSingleValue_new(modelrun_id,
					MOHAVE_CONT_AF_SDI,
					date_1,
					'm', &return_val)) != OK)
    {
      PrintError("Could not retrieve content\n");
      return (ERROR);
    }
  values->sys_cont += (return_val/1000.0);
  
  /* fetch content of Havasu*/
  if ((result = SqlFetchSingleValue_new(modelrun_id,
					HAVASU_CONT_AF_SDI,
					date_1,
					'm', &return_val)) != OK)
    {
      PrintError("Could not retrieve content\n");
      return (ERROR);
    }
  values->sys_cont += (return_val/1000.0);
  
  /* fetch sched release of Lake Mead*/
  if ((result = SqlFetchSingleValue_new(modelrun_id,
					MEAD_SCHEDREL_CFS_SDI,
					date_1,
					'm', &return_val)) != OK)
    {
      PrintError("Could not retrieve scheduled release of Lake Mead\n");
      return (ERROR);
    }


  ConvertValue (return_val, 1, 2, date_1, &values->mead_sched_rel, 
		1000, 1, BY_MONTH, NA);
  
  /* fetch flood control release of Lake Mead*/
  if ((result = SqlFetchSingleValue_new(modelrun_id,
					MEAD_FCREL_CFS_SDI,
					date_1,
					'm', &return_val)) != OK)
    {
      PrintError("Could not retrieve flood control release of Lake Mead\n");
      return (ERROR);
    }

  ConvertValue (return_val, 1, 2, date_1, &values->mead_fc_rel, 
		1000, 1, BY_MONTH, NA);
 
  values->sys_cont = values->sys_cont/1000.0; /*system_cont is scaled in Mill_AF*/
  
  return(OK);
}
