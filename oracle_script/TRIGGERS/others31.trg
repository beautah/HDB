  CREATE OR REPLACE TRIGGER HDB_AGEN_PK_TRIG
  BEFORE INSERT OR UPDATE ON HDB_AGEN
  REFERENCING FOR EACH ROW
  BEGIN IF inserting THEN IF populate_pk.pkval_pre_populated = FALSE THEN :new.AGEN_ID := populate_pk.get_pk_val( 'HDB_AGEN', FALSE );  END IF; ELSIF updating THEN :new.AGEN_ID := :old.AGEN_ID; END IF; END;
/
show errors trigger HDB_AGEN_PK_TRIG;

CREATE OR REPLACE TRIGGER HDB_ATTR_PK_TRIG
  BEFORE INSERT OR UPDATE ON HDB_ATTR
  REFERENCING FOR EACH ROW
  BEGIN IF inserting THEN IF populate_pk.pkval_pre_populated = FALSE THEN :new.ATTR_ID := populate_pk.get_pk_val( 'HDB_ATTR', FALSE );  END IF; ELSIF updating THEN :new.ATTR_ID := :old.ATTR_ID; END IF; END;
/
show errors trigger HDB_ATTR_PK_TRIG;

CREATE OR REPLACE TRIGGER HDB_COLLECTION_SYSTEM_PK_TRIG
  BEFORE INSERT OR UPDATE ON HDB_COLLECTION_SYSTEM
  REFERENCING FOR EACH ROW
  BEGIN IF inserting THEN IF populate_pk.pkval_pre_populated = FALSE THEN :new.COLLECTION_SYSTEM_ID := populate_pk.get_pk_val( 'HDB_COLLECTION_SYSTEM', FALSE );  END IF; ELSIF updating THEN :new.COLLECTION_SYSTEM_ID := :old.COLLECTION_SYSTEM_ID; END IF; END;
/
show errors trigger HDB_COLLECTION_SYSTEM_PK_TRIG;


  CREATE OR REPLACE TRIGGER HDB_DAMTYPE_PK_TRIG
  BEFORE INSERT OR UPDATE ON HDB_DAMTYPE
  REFERENCING FOR EACH ROW
  BEGIN IF inserting THEN IF populate_pk.pkval_pre_populated = FALSE THEN :new.DAMTYPE_ID := populate_pk.get_pk_val( 'HDB_DAMTYPE', FALSE );  END IF; ELSIF updating THEN :new.DAMTYPE_ID := :old.DAMTYPE_ID; END IF; END;
/
show errors trigger HDB_DAMTYPE_PK_TRIG;

  CREATE OR REPLACE TRIGGER HDB_DATA_SOURCE_PK_TRIG
  BEFORE INSERT OR UPDATE ON HDB_DATA_SOURCE
  REFERENCING FOR EACH ROW
  BEGIN IF inserting THEN IF populate_pk.pkval_pre_populated = FALSE THEN :new.SOURCE_ID := populate_pk.get_pk_val( 'HDB_DATA_SOURCE', FALSE );  END IF; ELSIF updating THEN :new.SOURCE_ID := :old.SOURCE_ID; END IF; END;
/
show errors trigger HDB_DATA_SOURCE_PK_TRIG;

  CREATE OR REPLACE TRIGGER HDB_EXT_DATA_CODE_SYS_PK_TRIG
  BEFORE INSERT OR UPDATE ON HDB_EXT_DATA_CODE_SYS
  REFERENCING FOR EACH ROW
  BEGIN IF inserting THEN IF populate_pk.pkval_pre_populated = FALSE THEN :new.EXT_DATA_CODE_SYS_ID := populate_pk.get_pk_val( 'HDB_EXT_DATA_CODE_SYS', FALSE );  END IF; ELSIF updating THEN :new.EXT_DATA_CODE_SYS_ID := :old.EXT_DATA_CODE_SYS_ID; END IF; END;
/
show errors trigger HDB_EXT_DATA_CODE_SYS_PK_TRIG;

  CREATE OR REPLACE TRIGGER HDB_EXT_DATA_SOURCE_PK_TRIG
  BEFORE INSERT OR UPDATE ON HDB_EXT_DATA_SOURCE
  REFERENCING FOR EACH ROW
  BEGIN IF inserting THEN IF populate_pk.pkval_pre_populated = FALSE THEN :new.EXT_DATA_SOURCE_ID := populate_pk.get_pk_val( 'HDB_EXT_DATA_SOURCE', FALSE );  END IF; ELSIF updating THEN :new.EXT_DATA_SOURCE_ID := :old.EXT_DATA_SOURCE_ID; END IF; END;
/
show errors trigger HDB_EXT_DATA_SOURCE_PK_TRIG;


  CREATE OR REPLACE TRIGGER HDB_EXT_SITE_CODE_SYS_PK_TRIG
  BEFORE INSERT OR UPDATE ON HDB_EXT_SITE_CODE_SYS
  REFERENCING FOR EACH ROW
  BEGIN IF inserting THEN IF populate_pk.pkval_pre_populated = FALSE THEN :new.EXT_SITE_CODE_SYS_ID := populate_pk.get_pk_val( 'HDB_EXT_SITE_CODE_SYS', FALSE );  END IF; ELSIF updating THEN :new.EXT_SITE_CODE_SYS_ID := :old.EXT_SITE_CODE_SYS_ID; END IF; END;
/
show errors trigger HDB_EXT_SITE_CODE_SYS_PK_TRIG;

  CREATE OR REPLACE TRIGGER HDB_FEATURE_CLASS_PK_TRIG
  BEFORE INSERT OR UPDATE ON HDB_FEATURE_CLASS
  REFERENCING FOR EACH ROW
  begin
IF inserting THEN
  IF populate_pk.pkval_pre_populated = FALSE THEN
     :new.FEATURE_CLASS_ID := populate_pk.get_pk_val( 'HDB_FEATURE_CLASS', FALSE );
  END IF;
ELSIF updating THEN
  :new.FEATURE_CLASS_ID := :old.FEATURE_CLASS_ID;
END IF;
end;
/

show errors trigger HDB_FEATURE_CLASS_PK_TRIG;

  CREATE OR REPLACE TRIGGER HDB_FEATURE_PK_TRIG
  BEFORE INSERT OR UPDATE ON HDB_FEATURE
  REFERENCING FOR EACH ROW
  begin
IF inserting THEN
  IF populate_pk.pkval_pre_populated = FALSE THEN
     :new.FEATURE_ID := populate_pk.get_pk_val( 'HDB_FEATURE', FALSE );
  END IF;
ELSIF updating THEN
  :new.FEATURE_ID := :old.FEATURE_ID;
END IF;
end;
/

  CREATE OR REPLACE TRIGGER HDB_GAGETYPE_PK_TRIG
  BEFORE INSERT OR UPDATE ON HDB_GAGETYPE
  REFERENCING FOR EACH ROW
  BEGIN IF inserting THEN IF populate_pk.pkval_pre_populated = FALSE THEN :new.GAGETYPE_ID := populate_pk.get_pk_val( 'HDB_GAGETYPE', FALSE );  END IF; ELSIF updating THEN :new.GAGETYPE_ID := :old.GAGETYPE_ID; END IF; END;
/


  CREATE OR REPLACE TRIGGER HDB_LOADING_APPLICATIO_PK_TRIG
  BEFORE INSERT OR UPDATE ON HDB_LOADING_APPLICATION
  REFERENCING FOR EACH ROW
  BEGIN IF inserting THEN IF populate_pk.pkval_pre_populated = FALSE THEN :new.LOADING_APPLICATION_ID := populate_pk.get_pk_val( 'HDB_LOADING_APPLICATION', FALSE );  END IF; ELSIF updating THEN :new.LOADING_APPLICATION_ID := :old.LOADING_APPLICATION_ID; END IF; END;
/


  CREATE OR REPLACE TRIGGER HDB_METHOD_CLASS_PK_TRIG
  BEFORE INSERT OR UPDATE ON HDB_METHOD_CLASS
  REFERENCING FOR EACH ROW
  BEGIN IF inserting THEN IF populate_pk.pkval_pre_populated = FALSE THEN :new.METHOD_CLASS_ID := populate_pk.get_pk_val( 'HDB_METHOD_CLASS', FALSE );  END IF; ELSIF updating THEN :new.METHOD_CLASS_ID := :old.METHOD_CLASS_ID; END IF; END;
/

  CREATE OR REPLACE TRIGGER HDB_METHOD_PK_TRIG
  BEFORE INSERT OR UPDATE ON HDB_METHOD
  REFERENCING FOR EACH ROW
  BEGIN IF inserting THEN IF populate_pk.pkval_pre_populated = FALSE THEN :new.METHOD_ID := populate_pk.get_pk_val( 'HDB_METHOD', FALSE );  END IF; ELSIF updating THEN :new.METHOD_ID := :old.METHOD_ID; END IF; END;
/


  CREATE OR REPLACE TRIGGER HDB_MODEL_PK_TRIG
  BEFORE INSERT OR UPDATE ON HDB_MODEL
  REFERENCING FOR EACH ROW
  BEGIN
IF inserting THEN
  IF populate_pk.pkval_pre_populated = FALSE THEN
    :new.MODEL_ID := populate_pk.get_pk_val( 'HDB_MODEL', FALSE );
  END IF;
ELSIF updating THEN
  :new.MODEL_ID := :old.MODEL_ID;
END IF;
END;
/

  CREATE OR REPLACE TRIGGER HDB_OBJECTTYPE_PK_TRIG
  BEFORE INSERT OR UPDATE ON HDB_OBJECTTYPE
  REFERENCING FOR EACH ROW
  BEGIN IF inserting THEN IF populate_pk.pkval_pre_populated = FALSE THEN :new.OBJECTTYPE_ID := populate_pk.get_pk_val( 'HDB_OBJECTTYPE', FALSE );  END IF; ELSIF updating THEN :new.OBJECTTYPE_ID := :old.OBJECTTYPE_ID; END IF; END;
/

  CREATE OR REPLACE TRIGGER HDB_PROPERTY_PK_TRIG
  BEFORE INSERT OR UPDATE ON HDB_PROPERTY
  REFERENCING FOR EACH ROW
  begin
IF inserting THEN
  IF populate_pk.pkval_pre_populated = FALSE THEN
     :new.PROPERTY_ID := populate_pk.get_pk_val( 'HDB_PROPERTY', FALSE );
  END IF;
ELSIF updating THEN
  :new.PROPERTY_ID := :old.PROPERTY_ID;
END IF;
end;
/

  CREATE OR REPLACE TRIGGER HDB_RIVER_PK_TRIG
  BEFORE INSERT OR UPDATE ON HDB_RIVER
  REFERENCING FOR EACH ROW
  BEGIN IF inserting THEN IF populate_pk.pkval_pre_populated = FALSE THEN :new.RIVER_ID := populate_pk.get_pk_val( 'HDB_RIVER', FALSE );  END IF; ELSIF updating THEN :new.RIVER_ID := :old.RIVER_ID; END IF; END;
/

  CREATE OR REPLACE TRIGGER HDB_SITE_DATATYPE_PK_TRIG
  BEFORE INSERT OR UPDATE ON HDB_SITE_DATATYPE
  REFERENCING FOR EACH ROW
  BEGIN IF inserting THEN IF populate_pk.pkval_pre_populated = FALSE THEN :new.SITE_DATATYPE_ID := populate_pk.get_pk_val( 'HDB_SITE_DATATYPE', FALSE );  END IF; ELSIF updating THEN :new.SITE_DATATYPE_ID := :old.SITE_DATATYPE_ID; END IF; END;
/


  CREATE OR REPLACE TRIGGER HDB_STATE_PK_TRIG
  BEFORE INSERT OR UPDATE ON HDB_STATE
  REFERENCING FOR EACH ROW
  BEGIN IF inserting THEN IF populate_pk.pkval_pre_populated = FALSE THEN :new.STATE_ID := populate_pk.get_pk_val( 'HDB_STATE', FALSE );  END IF; ELSIF updating THEN :new.STATE_ID := :old.STATE_ID; END IF; END;
/

  CREATE OR REPLACE TRIGGER HDB_USBR_OFF_PK_TRIG
  BEFORE INSERT OR UPDATE ON HDB_USBR_OFF
  REFERENCING FOR EACH ROW
  BEGIN IF inserting THEN IF populate_pk.pkval_pre_populated = FALSE THEN :new.OFF_ID := populate_pk.get_pk_val( 'HDB_USBR_OFF', FALSE );  END IF; ELSIF updating THEN :new.OFF_ID := :old.OFF_ID; END IF; END;
/

  CREATE OR REPLACE TRIGGER REF_EXT_SITE_DATA_MAP_PK_TRIG
  BEFORE INSERT OR UPDATE ON REF_EXT_SITE_DATA_MAP
  REFERENCING FOR EACH ROW
  BEGIN IF inserting THEN IF populate_pk.pkval_pre_populated = FALSE THEN :new.MAPPING_ID := populate_pk.get_pk_val( 'REF_EXT_SITE_DATA_MAP', FALSE );  END IF; ELSIF updating THEN :new.MAPPING_ID := :old.MAPPING_ID; END IF; END;
/

  CREATE OR REPLACE TRIGGER REF_RATING_DT_LOAD
  BEFORE INSERT OR UPDATE ON REF_RATING
  REFERENCING FOR EACH ROW
  begin
:new.date_time_loaded := sysdate; end;
/

  CREATE OR REPLACE TRIGGER REF_DB_LIST_PK_TRIG
  BEFORE INSERT OR UPDATE ON REF_DB_LIST
  REFERENCING FOR EACH ROW
  BEGIN
IF inserting THEN
  IF populate_pk.pkval_pre_populated = FALSE THEN
    :new.SESSION_NO := populate_pk.get_pk_val( 'REF_DB_LIST', FALSE );
  END IF;
ELSIF updating THEN
  :new.SESSION_NO := :old.SESSION_NO;
END IF;
END;
/

  CREATE OR REPLACE TRIGGER REF_AGG_DISAGG_PK_TRIG
  BEFORE INSERT OR UPDATE ON REF_AGG_DISAGG
  REFERENCING FOR EACH ROW
  BEGIN IF inserting THEN IF populate_pk.pkval_pre_populated = FALSE THEN :new.AGG_DISAGG_ID := populate_pk.get_pk_val( 'REF_AGG_DISAGG', FALSE );  END IF; ELSIF updating THEN :new.AGG_DISAGG_ID := :old.AGG_DISAGG_ID; END IF; END;
/
show errors trigger REF_AGG_DISAGG_PK_TRIG;




