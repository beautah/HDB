#!/bin/bash
#figure out how to do dates
beg_date=$1
end_date=$2

#Need GNU date:
if [ `uname` = 'SunOS' ] ; then {
  date=/usr/local/bin/date
}
elif [ `uname` = 'Linux' ] ; then {
  date=/bin/date
}
fi

#the following
beg_year=${beg_date:0:2}
beg_mon=${beg_date:2:3}
beg_day=${beg_date:5:2}
end_year=${end_date:0:2}
end_mon=${end_date:2:3}
end_day=${end_date:5:2}

beg_sec=`$date -d"$beg_day-$beg_mon-$beg_year" +%s`
end_sec=`$date -d"$end_day-$end_mon-$end_year" +%s`

if [ $beg_sec -gt $end_sec ]
then
    echo "No Joy, begin date is after end date, or date format problem"
    exit 1
fi

# typeset is a shell command that allows setting the type of the variable,
# in these cases, num_days and i are both -i, or integer, which allows
# shell arithmetic without the clumsy $(( expression )) setup
# could use i=`expr $i + 1`
# but this actually takes a noticable amount of time when
# running 300 days
typeset -i num_days=(end_sec-beg_sec)/86400

cur_date=$beg_date
typeset -i i=0

#create a file with all the dates we want in it in the form
# DD-MON-YY + i day 
#        ^^ note the 2 digit year, problem throughout all SCADA programs

until [ $i -gt $num_days ]
do
    echo "$beg_day-$beg_mon-$beg_year + $i day" >>junk$$
    i=i+1
done

# the GNU version of date, which is installed in /usr/local/bin
# reads from this file, and prints out one date per line
# in the format DDMonYY which we then tr into all uppercase, DDMONYY

$date -f junk$$ +%y%h%d |tr '[:lower:]' '[:upper:]'

# delete the junk file. $$ is variable for current processes PID, which
#makes the file have a unique name.

\rm -f junk$$
