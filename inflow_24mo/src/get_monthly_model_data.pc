/*************************************************************************************************************
*
* get_monthly_data
* Purpose: retrieves one value from the real monthly table
*
* Input
* 	
*	ID        site_id
*       ID        datatype_id
*       SQL_DATE  dt
*       float     *value
*
*       
* Return
* 	int	OK or ERROR: indicates if count was retrieved
*
*************************************************************************************************************
*
* get_monthly_model_data
* Purpose: retrieves one value from the monthly model table
*
* Input
* 	
*	ID        site_id
*       ID        datatype_id
*       SQL_DATE  dt
*       SQL_DATE  model_run_date
*       char      *type
*       int       probab
*       float     *value
*       ID        model_id
*
*       
* Return
* 	int	OK or ERROR: indicates if count was retrieved
*
*************************************************************************************************************
*
* load_monthly_model_data
* Purpose: loads one value into the monthly model table
*
* Input
* 	
*	ID        model_run_id
*       ID        site_id
*       ID        datatype_id
*       SQL_DATE  dt
*       float     *value

*
*       
* Return
* 	int	OK or ERROR: indicates if count was retrieved
*
******************************************************************************************************************
*
* get_monthly_model_range_data
* Purpose: retrieves one value from the monthly range table
*
* Input
* 	
*	ID        site_id
*       ID        datatype_id
*       SQL_DATE  b_dt
*       SQL_DATE  e_dt
*       SQL_DATE  model_run_date
*       char      *type
*       int       probab
*       float     *value
*       ID        model_id
*
*       
* Return
* 	int	OK or ERROR: indicates if count was retrieved
*
*
*
*************************************************************************************************************
*
* get_monthly_stats_data
* Purpose: retrieves an array 12 values from the monthly model stats table
*
* Input
* 	
*	ID        site_id
*       ID        datatype_id
*	ID	  stats_model_run_id
*	VALUE     *values
*
*       
* Return
* 	int	OK or ERROR: indicates if count was retrieved
*
*
*
*****************************************************************************/

/* AUTHOR - EDITOR  Bob Dylan - November 1996 */

/***************************************************************************/

EXEC SQL INCLUDE SQLCA;
#include <stdio.h>
#include "defines.h"
#include "dbutils.h"
#include "utils.h"

#define FUNC_NAME    "get_monthly_data"

int get_monthly_data (ID site_id, ID datatype_id, SQL_DATE prev_date,VALUE *val)
{
  EXEC SQL BEGIN DECLARE SECTION;
  SQL_DATE   dt;
  ID         s_id = site_id;
  ID         d_id = datatype_id;
  VALUE      value;/* create a pointer with the same location as incoming pointer */
  EXEC SQL END DECLARE SECTION;
  
  int result;

  strcpy(dt,prev_date);
  SqlFormatDate(dt,dt);

  EXEC SQL SELECT A.VALUE INTO :value
    FROM R_MONTH A, HDB_SITE_DATATYPE B
      WHERE B.SITE_ID = :s_id
	AND A.SITE_DATATYPE_ID = B.SITE_DATATYPE_ID
	    AND B.DATATYPE_ID = :d_id
	      AND to_char(START_DATE_TIME,'dd-mon-yyyy hh24:mi:ss') = lower(:dt);
  if ((result = SqlErrorHandler 
       (FUNC_NAME, FALSE,
	"Error retrieving data from r_month on %s for site id of %d and datatype id of %d\n",dt,s_id,d_id)) == ERROR)
    {		
      EXEC SQL ROLLBACK;
      return (ERROR);
    }
  
  EXEC SQL COMMIT;
  *val = value;
  return (OK);
}

/*****************************************************************************/

#define FUNC_NAME    "get_monthly_model_data"

int get_monthly_model_data (ID site_id, ID datatype_id, SQL_DATE dt,SQL_DATE model_run_date, char *type, int probab,VALUE *val, ID model_id)
{
  EXEC SQL BEGIN DECLARE SECTION;
  SQL_DATE   dater,model_r_dt;
  ID         s_id = site_id;
  ID         d_id = datatype_id;
  ID         m_id = model_id; /* model_id populated in .h file */
  ID         model_run_id;
  ID         prob = probab;
  char       typ[2];
  VALUE      value;/* create a pointer with the same location as incoming pointer */
  EXEC SQL END DECLARE SECTION;
  
  int result;

  strcpy(model_r_dt,model_run_date);
  SqlFormatDate(model_r_dt,model_r_dt);

  strcpy(typ,type);
  /* get the model run id */  

  EXEC SQL SELECT MODEL_RUN_ID into :model_run_id FROM REF_MODEL_RUN
	WHERE MODEL_ID = :m_id
	AND to_char(RUN_DATE,'dd-mon-yyyy hh24:mi:ss') = lower(:model_r_dt)
	AND PROBABILITY = :prob
	AND MODELTYPE = :typ;

  if ((result = SqlErrorHandler 
       (FUNC_NAME, FALSE,
	"Error retrieving data from ref_model_run with a model run date of %s \nwith model id of %d with a probability of %d and a modeltype of %s\n",model_r_dt,m_id,prob,typ)) == ERROR)
    {		
      EXEC SQL ROLLBACK;
      return (ERROR);
    }
  
  EXEC SQL COMMIT;

  strcpy(dater,dt);
  SqlFormatDate(dt,dt);

  EXEC SQL SELECT A.VALUE INTO :value
    FROM M_MONTH A, HDB_SITE_DATATYPE B
      WHERE A.MODEL_RUN_ID = :model_run_id
	AND A.SITE_DATATYPE_ID = B.SITE_DATATYPE_ID
	  AND B.SITE_ID = :s_id
	    AND B.DATATYPE_ID = :d_id
	      AND to_char(START_DATE_TIME,'dd-mon-yyyy hh24:mi:ss') = lower(:dater);
  if ((result = SqlErrorHandler 
       (FUNC_NAME, FALSE,
	"Error retrieving data from m_month on %s with model run id of %d for site id of %d and datatype id of %d\n",dater,model_run_id,s_id,d_id)) == ERROR)
    {		
      EXEC SQL ROLLBACK;
      return (ERROR);
    }
  
  EXEC SQL COMMIT;
  *val = value;
  return (OK);
}

/***************************************************************************************************/

#define FUNC_NAME    "get_monthly_model_range_data"

int get_monthly_model_range_data (ID site_id, ID datatype_id, SQL_DATE b_dt,SQL_DATE e_dt,SQL_DATE model_run_date, char *type, int probab,VALUE *val, ID model_id)
{
  EXEC SQL BEGIN DECLARE SECTION;
  SQL_DATE   b_dater,e_dater,model_r_dt;
  ID         s_id = site_id;
  ID         d_id = datatype_id;
  ID         m_id = model_id; /* model_id populated in .h file */
  ID         model_run_id;
  ID         prob = probab;
  char       typ[2];
  VALUE      value;/* create a pointer with the same location as incoming pointer */
  EXEC SQL END DECLARE SECTION;
  
  int result;

  strcpy(model_r_dt,model_run_date);
  SqlFormatDate(model_r_dt,model_r_dt);

  strcpy(typ,type);
  /* get the model run id */  

  EXEC SQL SELECT MODEL_RUN_ID into :model_run_id FROM REF_MODEL_RUN
	WHERE MODEL_ID = :m_id
	AND to_char(RUN_DATE,'dd-mon-yyyy hh24:mi:ss') = lower(:model_r_dt)
	AND PROBABILITY = :prob
	AND MODELTYPE = :typ;

  if ((result = SqlErrorHandler 
       (FUNC_NAME, FALSE,
	"Error retrieving data from ref_model_run with a model run date of %s with model id of %d with a probability of %d and a modeltype of %s",model_r_dt,m_id,prob,typ)) == ERROR)
    {		
      EXEC SQL ROLLBACK;
      return (ERROR);
    }
  
  EXEC SQL COMMIT;

  strcpy(b_dater,b_dt);
  strcpy(e_dater,e_dt);
  SqlFormatDate(b_dater,b_dater);
  SqlFormatDate(e_dater,e_dater);

  EXEC SQL SELECT A.VALUE INTO :value
    FROM M_MONTHRANGE A, HDB_SITE_DATATYPE B
      WHERE A.MODEL_RUN_ID = :model_run_id
	AND A.SITE_DATATYPE_ID = B.SITE_DATATYPE_ID
	  AND B.SITE_ID = :s_id
	    AND B.DATATYPE_ID = :d_id
	      AND to_char(START_DATE_MONTH,'dd-mon-yyyy hh24:mi:ss') = lower(:b_dater)
		AND to_char(END_DATE_MONTH,'dd-mon-yyyy hh24:mi:ss') = lower(:e_dater);
  if ((result = SqlErrorHandler 
       (FUNC_NAME, FALSE,
	"Error retrieving data from m_monthrange between %s and %s with model run id of %d for site id of %d and datatype id of %d\n",b_dater,e_dater,model_run_id,s_id,d_id)) == ERROR)
    {		
      EXEC SQL ROLLBACK;
      return (ERROR);
    }
  
  EXEC SQL COMMIT;
  *val = value;
  return (OK);
}

/***************************************************************************************************/

#define FUNC_NAME    "get_monthly_stats_data"

int get_monthly_stats_data (ID site_id, ID datatype_id, ID stats_model_run_id, VALUE *values)
{
  EXEC SQL BEGIN DECLARE SECTION;
  ID         s_id = site_id;
  ID         d_id = datatype_id;
  ID         m_r_id = stats_model_run_id; 
  ID         model_run_id;
  int        mon;
  VALUE      val;

  EXEC SQL END DECLARE SECTION;
  
  int result,i;

  for (i = 0; i < 12; i++)
    {
      mon = i+1;
      EXEC SQL SELECT A.VALUE INTO :val
	FROM M_MONTHSTAT A, HDB_SITE_DATATYPE B
	  WHERE A.MODEL_RUN_ID = :m_r_id
	    AND MONTH = :mon
	      AND A.SITE_DATATYPE_ID = B.SITE_DATATYPE_ID
		AND B.SITE_ID = :s_id
		  AND B.DATATYPE_ID = :d_id;
      
      if ((result = SqlErrorHandler 
	   (FUNC_NAME, FALSE,
	    "Error retrieving data from m_monthstat with model run id of %d for site id of %d and datatype id of %d\n",m_r_id,s_id,d_id)) == ERROR)
	{		
	  EXEC SQL ROLLBACK;
	  return (ERROR);
	}
      
      EXEC SQL COMMIT;
      values[i] = val;
    }
  return (OK);
}

/***************************************************************************************************/

#define FUNC_NAME "load_monthly_model_data"

int load_monthly_model_data (ID model_run_id_24mo, ID site_id, ID datatype_id, SQL_DATE dater, VALUE val)
	
{
 EXEC SQL BEGIN DECLARE SECTION;
 SQL_DATE      dt;
 SQL_DATE      end_dt;
 VALUE         value;
 ID            sdi,mri;

 EXEC SQL END DECLARE SECTION;

 int         result;
 int         site_datatype_id;
 char        tableName[25];

 mri = model_run_id_24mo;
 strcpy(dt,dater);
 SqlFormatDate(dt,dt);

 value=val;

 /* get the site_datatype_id */

 if ((result = SqlGetSiteDatatypeIdWithId
      (site_id,datatype_id,&site_datatype_id)) != OK)
   {
     EXEC SQL ROLLBACK;
     return (ERROR);
   }
 
 sdi = site_datatype_id;

 strcpy(tableName,"m_month");
 EXEC SQL UPDATE m_month
   SET value = :value
     where site_datatype_id = :sdi
       and model_run_id = :mri
	 and to_char(start_date_time,'dd-mon-yyyy hh24:mi:ss') = lower(:dt);
 if (sqlca.sqlcode == 0)
   {
     printf("\n\tWarning! - Data loaded for %s\n\tFor sdi %d model_run_id %d and value of %7.0f\n",dt,sdi,mri,value);
     printf("\twas updated not inserted into table %s\n\n",tableName);
   }
 
 /*   if the update failed the sqlca.sqlcode gets set to 100  */
 /*   then do an insert  */
 
 /* see if a record was updated; if not, then insert the record */
 
 if (sqlca.sqlcode > 0)
   {
     SqlDateMath(SUBTRACTION,dt,end_dt,1,MONTH); /* use this function to get an sql date of one month previous */


     EXEC SQL INSERT INTO m_month(model_run_id,site_datatype_id,start_date_time,end_date_time, value)
       VALUES
	 (:mri,:sdi, to_date(:dt,'dd-mon-yyyy hh24:mi:ss'), to_date(:end_dt,'dd-mon-yyyy hh24:mi:ss'),:value);
     
     if ((result = SqlErrorHandler 
	  (FUNC_NAME, FALSE,
	   "Problem inserting value 11.2f for SDI: %d model_run_id %d DATE: %s into %s.\n\tExiting.",value, sdi, mri, dt, tableName)) != OK)
       {
	 EXEC SQL ROLLBACK;
	 return (ERROR);
	 
       }
   }
 /* Make sure there is not an error on the update */
 else
   
   {
     if ((result = SqlErrorHandler 
	  (FUNC_NAME, FALSE,
	   "Problem updating value %11.2f for SDI: %d model_run_id %d DATE: %s into %s.\n\tExiting.", value, sdi, mri, dt, tableName)) != OK)
       {
	 EXEC SQL ROLLBACK;
	 return (ERROR);
       }
   }
 EXEC SQL COMMIT;
 
 return (OK);
 
}

