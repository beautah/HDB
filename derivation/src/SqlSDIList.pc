/*****************************************************************************
* DESCRIPTION
*
* This file contains the SQL functions that check a user specified list
* (on the commandline or otherwise) for illegal characters and
* against the derivation source specifications, for later use
* by the derivation application in running through the values in r_base_update
*
***************************************
*
* SqlVerifySDIList
*
* Purpose: Contains logic for verify user passed in sdi list.
*
* Input:   char * sdilist
*
* Output:  None
*
* Return:  int - OK or ERROR
*
***************************************
* Author
*
* Andrew Gilmore
* November 2004
****************************************************************************/
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "utils.h"
#include "dbutils.h"
#include "defines.h"
#include "typedefs.h"
#include "derivation.h"
#include "derivationTypedefs.h"

extern SQL_DATE DATETIMELOADED;
extern FILE* LOGFILE;

EXEC SQL INCLUDE sqlca;

#define FUNC_NAME "SqlVerifySDIList"

int SqlVerifySDIList(char * sdilist)
{
   EXEC SQL BEGIN DECLARE SECTION;
      char sdiCountStatement[1200];
      int sdiCount;
   EXEC SQL END DECLARE SECTION;

   int i;
   int sdis;
   int commas = 0;
   int result;

   /* run through sdilist string, and check that it only contains
      numbers, commas and spaces.
      Also count number of commas
   */
   if (strlen(sdilist) > 1100)
   {       
     fprintf(stderr, "site_datatype_id list is too long! Blame Andrew!\n");
     return (ERROR);
   }

   for (i=0; i<strlen(sdilist); i++)
   {
      if (!isdigit(sdilist[i]) && sdilist[i] != ',' && !isspace(sdilist[i]))
      {
         fprintf(stderr, "site_datatype_id list needs to be comma separated numbers!\n");
         return (ERROR);
      }
      if (sdilist[i] == ',')
      {
         commas++;
      }
   }

   /* number of sdis in the list is number of commas plus one*/
   sdis = commas + 1;
   sprintf(sdiCountStatement, "SELECT COUNT(*) "
      "FROM ref_derivation_source WHERE site_datatype_id IN ( %s )", sdilist);

   /* count number of sdis in list that exist in ref_derivation_source */
   if ((result = SqlSelectCount(sdiCountStatement, &sdiCount)) != OK)
      {
         FilePrintError(LOGFILE,
                   "Problem querying row count in ref_derivation_source\n");
         return (ERROR);
      }

   if (sdis != sdiCount)
   {
      fprintf(stderr, "One or more of the site_datatype_ids specified do not have derivations defined!\n");
   }
      
   return (OK);
}
